mixin repeatingSection(name, values)
	- const { display = [], collapse = [], favorite } = values
	fieldset(class=`repeating_${dashedName(name)}`)
		input(type="hidden" name="attr_link" value="")
		.grid.gap-2.relative.repeating-grid
			.grid.grid-flow-col.gap-2.displayed.custom-grid
				+repeatingChatButton(attrName(name))
				//- Remove the name because it is the button above
				each val in display.filter((e) => e !== "name")
					+attrSpan(val)(class="display ellipse")
			if favorite
				+favoriteToggle()
			+editToggle()
			+collapseToggle()
			.collapsible.grid.gap-2
				+headerSpan(collapse)
				.description
					span.display(name='attr_description')
			.edit.grid.gap-2
				.grid.gap-2.edit-grid
					each val in [...display, ...collapse]
						+headerInput(val)
				.description
					+textarea('description')


mixin repeatingList(name, values)
	.grid.double-border-2.rounded-md.p-2.relative(class=dashedName(name)).content-start
		+title(name)
		+subheaders(values.display)
		+repeatingSection(name, values)

mixin repeatingSkills()
	fieldset(class=`repeating_skills`)
		input(type="hidden" name="attr_attribute_abbreviation" value= "STR")
		.grid.gap-2.relative.repeating-grid
			.grid.grid-flow-col.gap-2.displayed.custom-grid
				+repeatingRollButton(`skill`)
				span.uppercase(name=`attr_attribute_abbreviation`)
				+attrSpan('bonus')(class="text-center")
			+editToggle()
			+collapseToggle()
			.collapsible.grid.gap-2
				+headerSpan(["category"])
				.description
					span.display(name='attr_description')
			.edit.grid.gap-2
				each val in ["name", "category"]
					+headerInput(val)
				.grid.gap-2.grid-flow-col.items-center
					.grid.gap-2.col-auto-fr.items-center
						h4(data-i18n="attribute")
						select(name="attr_attribute")
							each val in coreAttributes
								option(value=`@{${val}}` data-i18n=val)
									val
					+headerInput("bonus")
				.description
					+textarea('description')

mixin repeatingAttacks()
	fieldset(class="repeating_attacks")
		input(type="hidden" name="attr_link" value="")
		input(type="hidden" name="attr_attribute_abbreviation" value= "STR")
		.grid.gap-2.relative.repeating-grid 
			.grid.grid-flow-col.gap-2.displayed.custom-grid
				+repeatingRollButton('name')
				each val in  ['apc', "attribute_abbreviation",'bonus', 'damage', 'damage type', 'range']
					if val === "damage"
						+repeatingDamageButton(val)(class="text-center")
					else
						+attrSpan(val)(class="text-center")
			+editToggle()
			+collapseToggle()
			.collapsible.grid.gap-2
				+headerSpan(['tags', "type", "size"])

				.description
					span.display(name='attr_description')
			.edit.grid.gap-2
				+textInputs(["name", "tags"])
				.grid.gap-2.grid-flow-col.items-center
					.grid.gap-2.col-auto-fr.items-center
						h4(data-i18n="attribute")
						select(name="attr_attribute")
							each val in coreAttributes
								option(value=`@{${val}}` data-i18n=val)
									val
					+headerInput("apc")
					+headerInput("bonus")
				+textInputs(["damage", "damage type"])
				+textInputs(["range", "reload"])
				+textInputs(["size", "type"])
				+textInputs(["category", "subcategory"])
				.description
					+textarea('description')

mixin repeatingSpellCards()
	fieldset(class="repeating_spells")
		input(type="hidden" name="attr_link" value="")
		.grid.gap-2.relative.repeating-grid.h-full.content-start.card
			.grid.grid-flow-col.gap-2.displayed.custom-grid.col-span-full
				+repeatingRollButton('name')
			.grid.gap-2.items-center.col-span-full(class!=attributes.class)
				+attrSpan("tags")(class="capitalize")
			+headerSpan(["apc", "spc"]).col-span-full
			+editToggle()
			+collapseToggle()
			.collapsible.grid.gap-2
				each val in ["range","requires", "duration", "damage", "damage type", "casting time", "recharge", "prerequisites", "upcharge"]
					+headerSpan(val)(class="capitalize")
				+headerSpan(["range", "requires", "duration"])
				+headerSpan(["damage", "damage type"])
				+headerSpan(["casting time", "recharge"])
				.description
					span.display(name='attr_description')
			.edit.grid.gap-2
				.grid.gap-2.edit-grid
					+textInputs(["name", "tags"]).grid-cols-2
					+textInputs(["apc", "spc", "range"]).grid-cols-3
					+textInputs(["requires", "duration"]).grid-cols-2
					+textInputs(["damage", "damage type"]).grid-cols-2
					+textInputs(["casting time", "recharge"]).grid-cols-2
					each val in ["prerequisites", "upcharge"]
						.grid.gap-2.col-auto-fr.items-center
							h4(data-i18n=val)
							+textInput(val)
				.description
					+textarea('description')
